// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiLayered.Respository.Contexts;

#nullable disable

namespace MultiLayered.Respository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230525021108_Create1")]
    partial class Create1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MultiLayered.Core.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "England"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("MultiLayered.Core.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TeamPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Teams", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4882),
                            Name = "Galatasaray SK",
                            TeamPrice = 500000m
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4893),
                            Name = "Fenerbahce SK",
                            TeamPrice = 400000m
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4894),
                            Name = "Besiktas JK",
                            TeamPrice = 300000m
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4895),
                            Name = "Trabzonspor SK",
                            TeamPrice = 200000m
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4895),
                            Name = "Basaksehir FC",
                            TeamPrice = 100000m
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4896),
                            Name = "Manchester City",
                            TeamPrice = 15000000m
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 2,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4897),
                            Name = "Manchester UTD",
                            TeamPrice = 14000000m
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4898),
                            Name = "Chesea FC",
                            TeamPrice = 12000000m
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4899),
                            Name = "Barcelona FC",
                            TeamPrice = 11480000m
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 3,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4900),
                            Name = "Real Madrid FC",
                            TeamPrice = 14000000m
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 3,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4901),
                            Name = "Atetico Madrid FC",
                            TeamPrice = 12220000m
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4902),
                            Name = "Juventus FC",
                            TeamPrice = 15420000m
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 4,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4903),
                            Name = "Internazional FC",
                            TeamPrice = 12670000m
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 4,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4904),
                            Name = "Inter Milan FC",
                            TeamPrice = 14790000m
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 4,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4904),
                            Name = "Napoli FC",
                            TeamPrice = 155500000m
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 4,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4905),
                            Name = "Roma FC",
                            TeamPrice = 13330000m
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 5,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4906),
                            Name = "Bayern Munch",
                            TeamPrice = 12550000m
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 5,
                            CreatedDate = new DateTime(2023, 5, 25, 5, 11, 7, 964, DateTimeKind.Local).AddTicks(4907),
                            Name = "Borusia Dortmund",
                            TeamPrice = 11000000m
                        });
                });

            modelBuilder.Entity("MultiLayered.Core.Models.TeamFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EuropeanCup")
                        .HasColumnType("int");

                    b.Property<int>("LeagueCup")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamFeatures", (string)null);
                });

            modelBuilder.Entity("MultiLayered.Core.Models.Team", b =>
                {
                    b.HasOne("MultiLayered.Core.Models.Country", "Country")
                        .WithMany("Teams")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MultiLayered.Core.Models.TeamFeature", b =>
                {
                    b.HasOne("MultiLayered.Core.Models.Team", "Team")
                        .WithOne("TeamFeature")
                        .HasForeignKey("MultiLayered.Core.Models.TeamFeature", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MultiLayered.Core.Models.Country", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("MultiLayered.Core.Models.Team", b =>
                {
                    b.Navigation("TeamFeature");
                });
#pragma warning restore 612, 618
        }
    }
}
